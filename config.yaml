# decide which subtasks to run
run:
    gene_selector: True
    gene_list_integrator: True
    cell_scorer: True
    cell_annotator: True
    
    


# configurations for gene selector
gene_selector:

# list of paths to the directories of the given input data sets
# directories must contain cell_labels.csv, genes_symbol.csv and matrix_sparse.npz
# shapes of those files as given in the example (need better description!!)
    paths:
        - '/data/local/jdohmen/ikarus/data/sc_cancer/laughney20_lung/'
        - '/data/local/jdohmen/ikarus/data/sc_cancer/lee20_crc/'

# list of names of the given input data sets
    names:
        - 'laughney'
        - 'lee'

# directly load adata.h5ad instead
    adata_is_given:
        - True
        - True

# if False make data preprocessing
    is_preprocessed:
        - True
        - True

# string column name of adata.obs
# this column contains the relevant cell labels
    obs_name: 'tier_0_hallmark_corrected'

# String name of the cell type which should be considered as up-regulated
    label_upreg: 'Normal'

# String name of the cell type which should be considered as down-regulated
# label_upreg is compared to label_downreg
# if null, label_upreg is compared to everything else in obs_name
    label_downreg: null

# genes are excluded if logfoldchanges < lfc_threshold
    lfc_threshold: 1

# genes are excluded if adjusted p val < pval_threshold
    pval_threshold: 0.1

# String name of the DE method
# currently only the 't-test_overestim_var' and 't-test' is supported
    DE_method: 't-test_overestim_var'

# String column name of DE results DataFrame
# sorting is done according to this column
    sort_by: 'logfoldchanges'

# Boolean corresponding to ascending (True) or descending (False) sorting
    sort_ascending: False


# configurations for gene list integrator
gene_list_integrator:

    # If gene_list_integrator is run without gene_selector, DE results DataFrames must be given.
    # Else, this is neglected.
    DE_results_dfs:
        -

# integration function
# currently only 'intersection' and 'union' are provided
# should be easy to integrate own functions to integrate multiple DataFrames,
# e.g. as variations of pd.concat()
    integration_fun: 'intersection'

# String column name of DE_results_df_0/1
# the integration is done according to this column
# integrated gene list is sorted according to the weighted avg of those columns (0/1)
    integrate_by: 'logfoldchanges'

# Boolean corresponding to ascending (True) or descending (False) sorting
    sort_ascending: False

# integer corresponding to the amount of top genes to be used after sorting
    top_x: 300


# configurations for cell scorer
cell_scorer:

    # If solely cell_scorer is run, gene list(s) must be given as signature(s).
    # Else, this is neglected.
    gene_lists:
        - 'out/Normal_refined_gene_list.csv'
        - 'out/Tumor_refined_gene_list.csv'
    
    # If solely cell_scorer is run, upregulated label names must be given
    # corresponding to the order of gene lists. Else, this is neglected.
    label_upregs:
        - 'Normal'
        - 'Tumor'

# path to the directory of the given input data set
# directory must contain cell_labels.csv, genes_symbol.csv and matrix_sparse.npz
# shapes of those files as given in the example (need better description!!)
    path: '/data/local/jdohmen/ikarus/data/sc_cancer/yeung13_ovarian/'

# name of the given input data set
    name: 'yeung'

# directly load adata.h5ad instead
    adata_is_given: True

# if False make data preprocessing
    is_preprocessed: True

# use the first n cells for test reason
# null, if using all cells
    n_cells: null

# string column name of adata.obs
# this column contains the cells that should get annotated
    obs_name: 'tier_0'


# configurations for cell annotator
cell_annotator:

    # If solely cell_annotator is run, scores for training and target data set must
    # given. Else, this is neglected.
    dataset_names:
        - 'laughney'
        - 'lee'
        - 'lambrechts'
    
    # Provide information: either 'training' or 'test'
    dataset_type:
        - 'training'
        - 'training'
        - 'test'

    # connectivities already given, else this will be calculated
    connectivities_given: False

    # label propagation already done, else this will be calculated
    label_propagation_done: False